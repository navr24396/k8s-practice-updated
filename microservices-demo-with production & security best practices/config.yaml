#C:\Users\Ashok Vardhan Raju\Pictures\Screenshots\Screenshot (325)
#updation-best practices
#1.added image tags
#2.added liveliness probe 
#3.added readiness probe
#4.added resources
#5.replaced nodeport with loadbalancer
#6.added more than 1 replicas
#7.have more than 1 worker nodes
#8.using labels
#9.using namespaces to isolate resources



apiVersion: apps/v1
kind: Deployment
metadata: 
  name: emailservice
  labels:
    app: emailservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: emailservice
  template:
    metadata:
      app: emailservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/emailservice:v0.2.3
          ports: 
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080" 
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:8080"]              #depends on microservice
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:8080"]  
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi
--- 

apiVersion: v1
kind: Service
metadata:
  name: emailservice
spec:
  selector: 
    app: emailservice
  type: ClusterIP
  ports: 
    - port: 8080
      targetPort: 8080
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: recommendationservice
  labels:
    app: recommendationservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: recommendationservice
  template:
    metadata:
      app: recommendationservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/recommendationservice:v0.2.3
          ports: 
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080" 
            - name: PRODUCT_CATALOGUE_SERVICE_ADDR
              value: "productcatalogservice:3550"        # since rec service needs to access product service
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:8080"]   
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:8080"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi
---
apiVersion: v1
kind: Service
metadata:
  name: recommendationservice
spec:
  selector: 
    app: recommendationservice
  type: ClusterIP
  ports: 
    - port: 8080
      targetPort: 8080
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: productcatalogservice
  labels:
    app: productcatalogservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: productcatalogservice
  template:
    metadata:
      app: productcatalogservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/productcatalogservice:v0.2.3
          ports: 
            - containerPort: 3550
          env:
            - name: PORT
              value: "3550" 
          livenessProbe: 
            initialDelaySeconds: 5
            periodSeconds: 5
            httpGet: 
              path: /health 
              port: 3550
          readinessProbe: 
            initialDelaySeconds: 5
            periodSeconds: 5
            httpGet: 
              path: /health 
              port: 3550
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi
            


--- 

apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
spec:
  selector: 
    app: productcatalogservice
  type: ClusterIP
  ports: 
    - port: 3550
      targetPort: 3550
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: paymentservice
  labels:
    app: paymentservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: paymentservice
  template:
    metadata:
      app: paymentservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/paymentservice:v0.2.3
          ports: 
            - containerPort: 50051
          env:
            - name: PORT
              value: "50051" 
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi
      

--- 

apiVersion: v1
kind: Service
metadata:
  name: paymentservice
spec:
  selector: 
    app: paymentservice
  type: ClusterIP
  ports: 
    - port: 50051
      targetPort: 50051
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: currencyservice
  labels:
    app: currencyservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: currencyservice
  template:
    metadata:
      app: currencyservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/currencyservice:v0.2.3
          ports: 
            - containerPort: 7000
          env:
            - name: PORT
              value: "7000" 
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi


--- 

apiVersion: v1
kind: Service
metadata:
  name: currencyservice
spec:
  selector: 
    app: currencyservice
  type: ClusterIP
  ports: 
    - port: 7000
      targetPort: 7000
      protocol: TCP

--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: shippingservice
  labels:
    app: shippingservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: shippingservice
  template:
    metadata:
      app: shippingservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/shippingservice:v0.2.3
          ports: 
            - containerPort: 50051
          env:
            - name: PORT
              value: "50051" 
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi
            
--- 

apiVersion: v1
kind: Service
metadata:
  name: shippingservice
spec:
  selector: 
    app: shippingservice
  type: ClusterIP
  ports: 
    - port: 50051
      targetPort: 50051
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: adservice
  labels:
    app: adservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: adservice
  template:
    metadata:
      app: adservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
          ports: 
            - containerPort: 9555
          env:
            - name: PORT
              value: "9555" 
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:9555"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:9555"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi


--- 


apiVersion: v1
kind: Service
metadata:
  name: adservice
spec:
  selector: 
    app: adservice
  type: ClusterIP
  ports: 
    - port: 9555
      targetPort: 9555
      protocol: TCP

--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: cartservice
  labels:
    app: cartservice
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: cartservice
  template:
    metadata:
      app: cartservice
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/cartservice:v0.2.3
          ports: 
            - containerPort: 7070
          env:
            - name: PORT
              value: "7070" 
            - name: REDIS_ADDR                
              value: "redis-cart:6379"          #NEEDS TO COONECT TO REDDIS (in memory db)    (<svc name>:port)
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7070"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7070"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi



--- 

apiVersion: v1
kind: Service
metadata:
  name: cartservice
spec:
  selector: 
    app: cartservice
  type: ClusterIP
  ports: 
    - port: 7070
      targetPort: 7070
      protocol: TCP
--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: redis-cart
  labels:
    app: redis-cart
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: redis-cart
  template:
    metadata:
      app: redis-cart
    spec:
      containers:
        - name: redis
          image: redis:alpine
          ports: 
            - containerPort: 6379
          env:
            - name: PORT
              value: "6379" 
          volumeMounts: 
            - name: redis-data
              mountPath: /data
          livenessProbe: 
            periodSeconds: 5
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
          readinessProbe: 
            periodSeconds: 5
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
          resources: 
            requests:
              cpu: 100m
              memory: 200Mi
            limits: 
              cpu: 200m
              memory: 400Mi
            
      volumes: 
        - name: redis-data
          emptyDir: {}

--- 

apiVersion: v1
kind: Service
metadata:
  name: redis-cart
spec:
  selector: 
    app: redis-cart
  type: ClusterIP
  ports: 
    - port: 6379
      targetPort: 6379
      protocol: TCP

--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: CheckoutService
  labels:
    app: CheckoutService
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: CheckoutService
  template:
    metadata:
      app: CheckoutService
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/CheckoutService:v0.2.3
          ports: 
            - containerPort: 5050
          env:
            - name: PORT
              value: "5050" 
            - name: PRODUCT_CATALOGUE_SERVICE_ADDR
              value: "productcatalogservice:3550"
            - name: SHIPPING_SERVICE_ADDR
              value: "shippingservice:50051"
            - name: PAYMENT_SERVICE_ADDR
              value: "paymentservice:50051"
            - name: EMAIL_SERVICE_ADDR
              value: "emailservice:8080"
            - name: CURRENCY_SERVICE_ADDR
              value: "currencyservice:7000"
            - name: CART_SERVICE_ADDR
              value: "cartservice:7000"
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi


            
--- 

apiVersion: v1
kind: Service
metadata:
  name: CheckoutService
spec:
  selector: 
    app: CheckoutService
  type: ClusterIP
  ports: 
    - port: 5050
      targetPort: 5050
      protocol: TCP

--- 

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: frontend
  labels:
    app: frontend
spec: 
  replicas: 2
  selector:
    matchLabels: 
      app: frontend
  template:
    metadata:
      app: frontend
    spec:
      containers:
        - name: sevice
          image: gcr.io/google-samples/microservices-demo/frontend:v0.2.3
          ports: 
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080" 
            - name: PRODUCT_CATALOGUE_SERVICE_ADDR
              value: "productcatalogservice:3550"
            - name: SHIPPING_SERVICE_ADDR
              value: "shippingservice:50051"
            - name: PAYMENT_SERVICE_ADDR
              value: "paymentservice:50051"
            - name: EMAIL_SERVICE_ADDR
              value: "emailservice:8080"
            - name: CURRENCY_SERVICE_ADDR
              value: "currencyservice:7000"
            - name: CART_SERVICE_ADDR
              value: "cartservice:7000"
          livenessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          readinessProbe: 
            periodSeconds: 5
            exec: 
              command: ["/bin/grpc_health_probe", "-addr=:7000"]
          resources: 
            requests:
              cpu: 100m
              memory: 64Mi
            limits: 
              cpu: 200m
              memory: 128Mi


            
--- 

apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector: 
    app: frontend
  type: LoadBalancer
  ports: 
    - port: 8080
      targetPort: 8080
      nodePort: 30000
      protocol: TCP



